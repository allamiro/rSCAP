#!/bin/bash
#
#title                       :rhelrSCAP.bash
#description                 :This script will perform scap checks using DISA stigs check xml file
#                            :then write the result to ckl file
#author                      :ARCSIGHT TEAM: Tamir Suliman tamir.b.suliman.ctr@mail.mil
#date                        :2020-02-05
#version                     :1.0
#usage                       :bash rhelrSCAP.bash stig_check.xml
#notes                       :Install xmlstarlet and libxml2
#bash_version                :tested successfully on version 4.2.46(2)-release
#to consider                 :Uncomment the following 2 lines of code  to install xmlstarlet on a Linux System if
#                            :you dont have a yum repository.
#wget --no-check-certificate https://dl.fedoraproject.org/pub/epel/7Server/x86_64/Packages/x/xmlstarlet-1.6.1-1.el7.x86_64.rpm
#sudo yum localinstall xmlstarlet -y
#  OR
# yum install xmlstarlet -y
                                             ### /**** SCRIPT STARTS HERE ****
#Cause the script to exit if some command fails
set -e

# Set the environment variables
#echo PATH="$PATH$(find /home/arcsight/rSCAP -type d -printf ":%p")" >> /etc/profile
#echo "export PATH" >> /etc/profile
# root
#echo PATH="$PATH$(find /home/arcsight/rSCAP -type d -printf ":%p")" >> /root/.bash_profile
#echo "export PATH" >> /root/.bash_profile
#source /etc/profile

# set the text colors variables
export GREEN='\033[0;32m'
export G='\033[0;32m'
export NC='\033[0m'
# some date Variables 
export today=$(date +%h-%d)
export todayAll=$(date +%Y-%m-%d)
export logFile='logs/RHEL-rSCAP-$todayAll.log'
export logTime=`date "+%Y-%m-%d %H:%M:%S"`


PATH=/sbin:/bin:/usr/sbin:/usr/bin:/home/arcsight/rSCAP:/home/arcsight/rSCAP/functions:/home/arcsight/rSCAP/stig_checks:/home/arcsight/rSCAP/stig_checks/RHEL:/home/arcsight/rSCAP/stig_checks/RHEL/V2R6:/home/arcsight/rSCAP/stig_checks/RHEL/V2R6/2020-01-26:/home/arcsight/rSCAP/logs:/home/arcsight/rSCAP/results

export PATH




# Results Variables

export TYPE=`echo $1 | grep "-"|cut -d"-" -f1`
export STG_VERSION=`echo $1 |grep V | cut -d "_" -f2`
export TODAY_DT=`date +%Y-%m-%d`
export func_scripts="functions/"
export N_CHECKS="stig_checks/$TYPE/$STG_VERSION/$TYPE_$TODAY_DT"
export N_RESULTS="results/$TYPE/$STG_VERSION/$TYPE_$TODAY_DT/" && mkdir -p $N_RESULTS

# Logo and script conditions

if [ -z $1 ]
then
echo ""
printf '%s\n'
echo -e "..........................................|> ${GREEN}No STIG CKL file found please try again${NC}"
printf '%s\n'
exit 0
else
echo ""
echo "                                                         "
echo "     _____   _____ _____      _______          __            "
echo -e "${GREEN} |  __ \ / ____/ ____|    / ____\ \        / /\  ${NC}"
echo -e " | |__) | |   | |   _____| (___  \ \  /\  / /  \         "
echo -e " |  _  /| |   | |  |______\___ \  \ \/  \/ / /\ \        "
echo -e " | | \ \| |___| |____     ____) |  \  /\  / ____ \       "
echo -e " |_|  \_\\_____\_____|   |_____/__  \/  \/_/   _\_\ ___  "
echo -e "${GREEN} / ____|/ ____|   /\   |  __ \           /_ | / _ \ ${NC}"
echo -e "   _ _| (___ | |       /  \  | |__) |_______   _| || | | |"
echo -e " | '__\___ \| |      / /\ \ |  ___/______\ \ / / || | | |"
echo -e " | |  ____) | |____ / ____ \| |           \ V /| || |_| |" 
echo -e " |_| |_____/ \_____/_/    \_\_|            \_/ |_(_)___/ "
echo -e "                                                         "                                                              
echo ""
printf '%s\n'
echo -e "..........................................|> ${GREEN}STIG CKL XML File Found${NC}"


#YUM-Server Function Check


#export HSTNMCK=`hostname -s`
#case $HSTNMCk in

#*y*|*Y*|*YUM*|*yum*)

#echo 'YUM server detected...'

export htpfile="/etc/httpd/conf/httpd.conf"
export slfile="/etc/http/conf.d/ssl.conf"

#;;






#*)



#esac










cat $1 > `hostname -f`.xml
echo -e "..........................................|> ${GREEN}STIG CKL XML File created${NC}"

fi


# XML FILE DATA VARIABLES - TARGET DATA INFO
HOSTNAME=$(hostname)
HOSTFQDN=$(hostname -f)
HOST_IP=$(hostname -i|cut -f2 -d ' ')
HOST_MAC=$(ip addr | grep link/ether | awk '{print $2}')

# Updating STIG File  Target Data Info.
xmlTargetFileName=`hostname -f`.xml
export xmlTargetFileName

echo " "
echo "..........................................|> Editing Target Data Section"
xmlstarlet edit --inplace --update "//CHECKLIST/ASSET/HOST_NAME" --value "$HOSTNAME" $xmlTargetFileName
xmlstarlet edit --inplace --update "//CHECKLIST/ASSET/HOST_FQDN" --value "$HOSTFQDN" $xmlTargetFileName
xmlstarlet edit --inplace --update "//CHECKLIST/ASSET/HOST_IP" --value "$HOST_IP" $xmlTargetFileName
xmlstarlet edit --inplace --update "//CHECKLIST/ASSET/HOST_MAC" --value "$HOST_MAC" $xmlTargetFileName
echo -e "..........................................|> ${GREEN}Editing Target Data Section completed!${NC}"
echo -e "${GREEN}...................................................................................${NC}"

VULN_TOTAL=`xmlstarlet sel -t -c "count(//VULN)" $xmlTargetFileName`
echo -e  "Total Number of Vulnerability checks......|> ${GREEN}$(( $VULN_TOTAL + 1 ))${NC}"

VULN_COUNT=0

# ITERATION THROUGH VULN-ID

while [ $VULN_COUNT -lt $VULN_TOTAL ]
do

	VULN_COUNT=$(( $VULN_COUNT + 1 ))
	VulnId=$(xmlstarlet sel  -T -t -v  "//VULN[$VULN_COUNT]/STIG_DATA[1]/ATTRIBUTE_DATA[1]" $xmlTargetFileName)
	#;printf '%s\n' "$VulnId"
	VulnStatus=$(xmlstarlet sel  -T -t -v  "//VULN[$VULN_COUNT]/STATUS[1]" $xmlTargetFileName)
	#;printf '%s\n' "$VulnStatus"
	vvid=$(xmlstarlet sel  -T -t -v  "//VULN[$VULN_COUNT]/STIG_DATA[1]/ATTRIBUTE_DATA[1]" $xmlTargetFileName)
	export VULN_COUNT
	
	for vuln in $vvid
	do
		# Executing the Scripts
		$vuln
		export vuln

	done
done

# Results 

echo ""
printf '%s\n'
printf '%s\n'
echo " rSCAP -> RHEL <- completed processing all checks "
echo " DISA STIG CKL File saved at $PWD/$xmlTargetFileName "
printf '%s\n'
printf '%s\n'
echo ""
# Used with set -e

exit 0
